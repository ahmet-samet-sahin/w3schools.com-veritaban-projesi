SQL İFADELERİ
--- PostgreSQL database dump
--

-- Dumped from database version 13.1
-- Dumped by pg_dump version 13.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--- Name: tutorial; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tutorial (
tutorial_kodu integer NOT NULL,
adi character varying(50) NOT NULL,
baslik character varying(50) NOT NULL,
konu character varying(50) NOT NULL,

icerik text NOT NULL
);

ALTER TABLE public.tutorial OWNER TO postgres;

--- Name: diger_tutorial; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.diger_tutorial (
)
INHERITS (public.tutorial);

ALTER TABLE public.diger_tutorial OWNER TO postgres;

--- Name: ornekler; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ornekler (
ornek_kodu integer NOT NULL,
konu character varying(50) NOT NULL,
kod_parcalari text NOT NULL
);

ALTER TABLE public.ornekler OWNER TO postgres;

--- Name: dil_ornekler; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.dil_ornekler (
dil_kodu integer NOT NULL,
dil_adi character varying(20) NOT NULL
)
INHERITS (public.ornekler);

ALTER TABLE public.dil_ornekler OWNER TO postgres;

--- Name: dil_tutorial; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.dil_tutorial (
dil_kodu integer NOT NULL
)
INHERITS (public.tutorial);

ALTER TABLE public.dil_tutorial OWNER TO postgres;

--- Name: exercise; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.exercise (
exercise_kodu integer NOT NULL,
dil_kodu integer NOT NULL,
baslik character varying(50) NOT NULL,
icerik text NOT NULL
);

ALTER TABLE public.exercise OWNER TO postgres;

--- Name: framework; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.framework (
framework_kodu integer NOT NULL,
dil_kodu integer NOT NULL,
adi character varying(20) NOT NULL
);

ALTER TABLE public.framework OWNER TO postgres;

--- Name: framework_ornekler; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.framework_ornekler (
framework_kodu integer NOT NULL,
framework_adi character varying(20) NOT NULL
)
INHERITS (public.ornekler);

ALTER TABLE public.framework_ornekler OWNER TO postgres;

--- Name: framework_tutorial; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.framework_tutorial (
framework_kodu integer NOT NULL
)
INHERITS (public.tutorial);

ALTER TABLE public.framework_tutorial OWNER TO postgres;

--- Name: kutuphane; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.kutuphane (
kutuphane_kodu integer NOT NULL,
dil_kodu integer NOT NULL,
adi character varying(20) NOT NULL
);

ALTER TABLE public.kutuphane OWNER TO postgres;

--- Name: kutuphane_ornekler; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.kutuphane_ornekler (
kutuphane_kodu integer NOT NULL,
kutuphane_adi character varying(20) NOT NULL
)
INHERITS (public.ornekler);

ALTER TABLE public.kutuphane_ornekler OWNER TO postgres;

--- Name: kutuphane_tutorial; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.kutuphane_tutorial (
kutuphane_kodu integer NOT NULL
)
INHERITS (public.tutorial);

ALTER TABLE public.kutuphane_tutorial OWNER TO postgres;

--- Name: programlama_dili; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.programlama_dili (
dil_kodu integer NOT NULL,
dil_adi character varying(20) NOT NULL,
kategori character varying(20) NOT NULL
);

ALTER TABLE public.programlama_dili OWNER TO postgres;

--- Name: quiz; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.quiz (
quiz_kodu integer NOT NULL,
adi character varying(50) NOT NULL,

sorular text NOT NULL
);

ALTER TABLE public.quiz OWNER TO postgres;

--- Name: reference; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.reference (
reference_kodu integer NOT NULL,
baslik character varying(50) NOT NULL,
konu character varying(50) NOT NULL,
icerik text NOT NULL
);

ALTER TABLE public.reference OWNER TO postgres;

--- Name: sertifika; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sertifika (
sertifika_kodu integer NOT NULL,
ucret integer NOT NULL,
sertifika_adi character varying(50),
diller character varying(50),
CONSTRAINT sertifika_ucret_check CHECK ((ucret > 0))
);

ALTER TABLE public.sertifika OWNER TO postgres;

--- Data for Name: diger_tutorial; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.diger_tutorial VALUES
(7, 'Machine Learning Tutorial', 'Getting Started', '', 'Makine Öğrenimi, bilgisayarın verileri ve
istatistikleri inceleyerek öğrenmesini sağlıyor.

Makine Öğrenimi, yapay zeka (AI) yönünde bir adımdır.

Makine Öğrenimi, verileri analiz eden ve sonucu tahmin etmeyi öğrenen bir programdır.

Nereden Başlamalı?

Bu eğitimde matematiğe ve istatistik çalışmasına ve veri setlerine dayalı olarak önemli sayıların nasıl
hesaplanacağına geri döneceğiz.

İhtiyacımız olan yanıtları almak için çeşitli Python modüllerini nasıl kullanacağımızı da öğreneceğiz.

Ve öğrendiklerimize dayanarak sonucu tahmin edebilen işlevleri nasıl yapacağımızı öğreneceğiz.'),
(8, 'Data Science Tutorial', 'DS Introduction', 'Introduction', 'Veri Bilimi, verileri analiz etmek ve
onlardan bilgi ve öngörü elde etmek için istatistik, veri analizi ve makine öğrenimini kullanan birden çok
disiplinin birleşimidir.

Veri Bilimi nedir?

Veri Bilimi, veri toplama, analiz ve karar verme ile ilgilidir.

Veri Bilimi, analiz yoluyla verilerde kalıplar bulmak ve geleceğe yönelik tahminlerde bulunmakla ilgilidir.

Şirketler, Veri Bilimini kullanarak şunları yapabilir:

-Daha iyi kararlar (A veya B''yi seçmeli miyiz)
-Tahmine dayalı analiz (bundan sonra ne olacak?)
-Kalıp keşifleri (örüntü bulma veya verilerde gizli bilgiler olabilir)

Veri Bilimine Nerelerde İhtiyaç Duyulur?

Veri Bilimi bugün dünyada birçok endüstride kullanılmaktadır, ör. bankacılık, danışmanlık, sağlık hizmetleri ve
üretim.

Veri Biliminin gerekli olduğu yerlere örnekler:

Rota planlaması için: Gemiye giden en iyi rotaları keşfetmek için
Uçuş / gemi / tren vb. Gecikmeleri öngörmek için (tahmine dayalı analiz yoluyla)
Promosyon teklifleri oluşturmak için
Malları teslim etmek için en uygun zamanı bulmak
Bir şirketin gelecek yıllardaki gelirini tahmin etmek
Eğitimin sağlık yararını analiz etmek
Seçimleri kimin kazanacağını tahmin etmek için

Veri Bilimi, verilerin mevcut olduğu bir işletmenin neredeyse her bölümünde uygulanabilir. Örnekler:

Tüketim malları
Hisse senedi piyasaları
Sanayi
Siyaset
Lojistik şirketleri
E-ticaret');

--

-- Data for Name: dil_ornekler; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.dil_ornekler VALUES
(1, 'Syntax', 'print("Hello World")

#This is a comment.

"""This is a
multiline docstring."""', 1, 'Python'),
(2, 'Syntax', '<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Statements</h2>

<p>A <b>JavaScript program</b> is a list of <b>statements</b> to be executed by a computer.</p>

<p id="demo"></p>

<script>
var x, y, z; // Declare 3 variables
x = 5; // Assign the value 5 to x
y = 6; // Assign the value 6 to y
z = x + y; // Assign the sum of x and y to z

document.getElementById("demo").innerHTML =
"The value of z is " + z + ".";
</script>

</body>
</html>
', 2, 'JavaScript');

--- Data for Name: dil_tutorial; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.dil_tutorial VALUES
(1, 'Python Tutorial', 'Python Syntax', 'Syntax', 'Python Girintisi

Girinti, bir kod satırının başındaki boşlukları ifade eder.

Diğer programlama dillerinde koddaki girinti yalnızca okunabilirlik içindir, Python''daki girinti çok önemlidir.

Python, bir kod bloğunu belirtmek için girinti kullanır.

Örnek:

if 5>2:
print("Beş ikiden büyüktür!")', 1),
(2, 'JavaScript', 'JavaScript Variables', 'Variables', 'JavaScript değişkenleri, veri değerlerini depolamak
için kullanılan kaplardır.

Bu örnekte, x, y ve z, var anahtar sözcüğüyle bildirilen değişkenlerdir:

var x=5;
var y=6;
var z=x+y;

Yukarıdaki örnekten şunları bekleyebilirsiniz:

-x 5 değerini depolar
-y 6 değerini saklar
-z 11 değerini depolar', 2);

--- Data for Name: exercise; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.exercise VALUES
(1, 1, 'Python Exercise', '"Merhaba Dünya" çıktısını almak için aşağıdaki kodun eksik kısmını ekleyin.

.............("Hello World")'),
(2, 2, 'JavaScript Exercise', 'CarName adlı bir değişken oluşturun, ona Volvo değerini atayın.

var...........="..............";');

--- Data for Name: framework; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.framework VALUES
(1, 3, 'W3.CSS'),
(2, 2, 'W3.JS');

--- Data for Name: framework_ornekler; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.framework_ornekler VALUES
(1, 'W3.CSS Colors', '<!DOCTYPE html>
<html>
<title>W3.CSS</title>
<meta name="viewport" content="width=device-width, initial-scale=1">

<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<body>

<div class="w3-container">
<h1>Background Colors</h1>
<p>The w3-color classes defines background colors for HTML elements:</p>
</div>

<div class="w3-container w3-red">
<h2>London</h2>
<p>London is the most populous city in the United Kingdom, with a metropolitan area of over 9 million
inhabitants.</p>
</div>

<div class="w3-container w3-teal">
<h2>London</h2>
<p>London is the most populous city in the United Kingdom, with a metropolitan area of over 9 million
inhabitants.</p>
</div>

<div class="w3-container w3-yellow">
<h2>London</h2>
<p>London is the most populous city in the United Kingdom, with a metropolitan area of over 9 million
inhabitants.</p>
</div>

<div class="w3-container w3-gray">
<h2>London</h2>
<p>London is the most populous city in the United Kingdom, with a metropolitan area of over 9 million
inhabitants.</p>
</div>

<div class="w3-container w3-grey">
<h2>London</h2>

<p>London is the most populous city in the United Kingdom, with a metropolitan area of over 9 million
inhabitants.</p>
</div>

</body>
</html>
', 1, 'W3.CSS'),
(2, 'W3.JS Hide', '<!DOCTYPE html>
<html>
<title>W3.JS</title>
<script src="https://www.w3schools.com/lib/w3.js"></script>
<body>

<h2>Testing W3.JS in HTML</h2>

<p>Click on "Hide London":</p>

<p>
<button onclick="w3.hide(''#London'')">Hide London</button>
</p>

<div id="London" class="city">
<h2>London</h2>
<p>London is the capital city of England.</p>
</div>

<div id="Paris" class="city">
<h2>Paris</h2>
<p>Paris is the capital of France.</p>
</div>

<div id="Tokyo" class="city">
<h2>Tokyo</h2>

<p>Tokyo is the capital of Japan.</p>
</div>

</body>
</html>
', 2, 'W3.JS');

--- Data for Name: framework_tutorial; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.framework_tutorial VALUES
(5, 'W3.CSS Tutorial', 'W3.CSS Home', 'Introduction', 'W3.CSS bir CSS Framework''üdür

W3.CSS, varsayılan olarak masaüstü, tablet ve mobil tasarımı destekleyen modern bir CSS framework''üdür.

W3.CSS, benzer CSS frameworklerinden daha küçük ve daha hızlıdır.

W3.CSS, Bootstrap''e yüksek kaliteli bir alternatif olacak şekilde tasarlanmıştır.

Daha küçük, daha hızlı, öğrenmesi daha kolay ve kullanımı daha kolay olacak şekilde tasarlandı.

Ayrıca jQuery veya diğer herhangi bir JavaScript kitaplığından bağımsız olacak şekilde tasarlanmıştır.', 1),
(6, 'W3.JS Tutorial', 'W3.JS Home', 'Introduction', 'W3.JS, web geliştirme projelerini basitleştirmek için
tasarlanmış bir JavaScript kitaplığıdır:

Öğrenmesi ve kullanması kolay.

Hızlı uygulama geliştirme için tasarlanmıştır.

Tüm cihazlar için tasarlandı: PC, Tablet ve Mobil.

Kullanmak ücretsiz. Lisans yok.

', 2);

--- Data for Name: kutuphane; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.kutuphane VALUES
(1, 1, 'NumPy'),
(2, 2, 'jQuery');

--- Data for Name: kutuphane_ornekler; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.kutuphane_ornekler VALUES
(1, 'jQuery Selectors', '<!DOCTYPE html>
<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
$(document).ready(function(){
$("button").click(function(){
$("p").hide();
});
});
</script>

</head>
<body>

<h2>This is a heading</h2>

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

<button>Click me to hide paragraphs</button>

</body>
</html>
', 2, 'jQuery');

--- Data for Name: kutuphane_tutorial; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.kutuphane_tutorial VALUES
(3, 'NumPy Tutorial', 'NumPy Intro', 'Introduction', 'NumPy nedir?

NumPy, dizilerle çalışmak için kullanılan bir Python kitaplığıdır.

Ayrıca doğrusal cebir, fourier dönüşümü ve matrisler alanında çalışmak için işlevlere sahiptir.

NumPy, 2005 yılında Travis Oliphant tarafından oluşturuldu. Açık kaynak kodlu bir projedir ve özgürce
kullanabilirsiniz.

NumPy, Sayısal Python anlamına gelir.

Neden NumPy Kullanılır?

Python''da dizilerin amacına hizmet eden listelerimiz var, ancak işlenmesi yavaş.

NumPy, geleneksel Python listelerinden 50 kat daha hızlı bir dizi nesnesi sağlamayı amaçlamaktadır.

NumPy''deki dizi nesnesine ndarray adı verilir, ndarray ile çalışmayı çok kolaylaştıran birçok destekleyici işlev
sağlar.

Diziler, hız ve kaynakların çok önemli olduğu veri biliminde çok sık kullanılır.
', 1),
(4, 'jQuery Tutorial', 'jQuery Intro', 'Introduction', 'Çoktan Biliyor Olman Gereken Şey

JQuery çalışmaya başlamadan önce, aşağıdaki konularda temel bilgilere sahip olmalısınız:

HTML
CSS
JavaScript

JQuery nedir?

jQuery hafif, "daha az yaz, daha çok yap", JavaScript kitaplığıdır.

JQuery''nin amacı, web sitenizde JavaScript kullanımını çok daha kolay hale getirmektir.

jQuery, başarmak için birçok JavaScript kodu satırını gerektiren birçok ortak görevi alır ve bunları tek bir kod
satırıyla çağırabileceğiniz yöntemlere sarar.

jQuery, AJAX çağrıları ve DOM manipülasyonu gibi JavaScript''teki birçok karmaşık şeyi de basitleştirir.

JQuery kitaplığı aşağıdaki özellikleri içerir:

HTML / DOM işleme
CSS manipülasyonu
HTML olay yöntemleri
Efektler ve animasyonlar
AJAX
Araçlar
İpucu: Ek olarak, jQuery''nin neredeyse her görev için eklentileri vardır.

Neden jQuery?
Dışarıda birçok başka JavaScript kitaplığı var, ancak jQuery muhtemelen en popüler ve aynı zamanda en
genişletilebilir olanıdır.

Web''deki en büyük şirketlerin çoğu jQuery kullanıyor, örneğin:

Google
Microsoft
IBM
Netflix', 2);

--- Data for Name: ornekler; Type: TABLE DATA; Schema: public; Owner: postgres
--

--- Data for Name: programlama_dili; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.programlama_dili VALUES
(1, 'Python', 'Programming'),
(2, 'JavaScript', 'Programming'),

(3, 'CSS', 'HTML and CSS');

--- Data for Name: quiz; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.quiz VALUES
(1, 'Python Quiz', 'Python''da "Merhaba Dünya" çıktısını almak için doğru sözdizimi nedir?

A-) p("Hello World")
B-) echo("Hello World");
C-) print("Hello World")
D-) echo "Hello World"');

--- Data for Name: reference; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.reference VALUES
(1, 'Python Reference', 'String Methods', 'Metod
--------

Açıklama

-------------

capitalize ()

İlk karakteri büyük harfe çevirir.

');

--- Data for Name: sertifika; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.sertifika VALUES
(1, 90, 'Python Sertifikası', 'Python');

--- Data for Name: tutorial; Type: TABLE DATA; Schema: public; Owner: postgres
--

--- Name: exercise exercise_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.exercise
ADD CONSTRAINT exercise_pkey PRIMARY KEY (exercise_kodu);

--- Name: framework framework_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.framework
ADD CONSTRAINT framework_pkey PRIMARY KEY (framework_kodu);

--- Name: kutuphane kutuphane_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kutuphane
ADD CONSTRAINT kutuphane_pkey PRIMARY KEY (kutuphane_kodu);

--

-- Name: ornekler ornekler_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ornekler
ADD CONSTRAINT ornekler_pkey PRIMARY KEY (ornek_kodu);

--- Name: programlama_dili programlama_dili_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.programlama_dili
ADD CONSTRAINT programlama_dili_pkey PRIMARY KEY (dil_kodu);

--- Name: quiz quiz_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.quiz
ADD CONSTRAINT quiz_pkey PRIMARY KEY (quiz_kodu);

--- Name: reference reference_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reference
ADD CONSTRAINT reference_pkey PRIMARY KEY (reference_kodu);

--- Name: sertifika sertifika_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres

--

ALTER TABLE ONLY public.sertifika
ADD CONSTRAINT sertifika_pkey PRIMARY KEY (sertifika_kodu);

--- Name: tutorial tutorial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tutorial
ADD CONSTRAINT tutorial_pkey PRIMARY KEY (tutorial_kodu);

--- Name: dil_ornekler dil_ornekler_dil_kodu_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dil_ornekler
ADD CONSTRAINT dil_ornekler_dil_kodu_fkey FOREIGN KEY (dil_kodu) REFERENCES
public.programlama_dili(dil_kodu);

--- Name: dil_tutorial dil_tutorial_dil_kodu_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dil_tutorial
ADD CONSTRAINT dil_tutorial_dil_kodu_fkey FOREIGN KEY (dil_kodu) REFERENCES
public.programlama_dili(dil_kodu);

--- Name: exercise exercise_dil_kodu_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres

--

ALTER TABLE ONLY public.exercise
ADD CONSTRAINT exercise_dil_kodu_fkey FOREIGN KEY (dil_kodu) REFERENCES
public.programlama_dili(dil_kodu);

--- Name: framework framework_dil_kodu_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.framework
ADD CONSTRAINT framework_dil_kodu_fkey FOREIGN KEY (dil_kodu) REFERENCES
public.programlama_dili(dil_kodu);

--- Name: framework_ornekler framework_ornekler_framework_kodu_fkey; Type: FK CONSTRAINT; Schema:
public; Owner: postgres
--

ALTER TABLE ONLY public.framework_ornekler
ADD CONSTRAINT framework_ornekler_framework_kodu_fkey FOREIGN KEY (framework_kodu)
REFERENCES public.framework(framework_kodu);

--- Name: framework_tutorial framework_tutorial_framework_kodu_fkey; Type: FK CONSTRAINT; Schema:
public; Owner: postgres
--

ALTER TABLE ONLY public.framework_tutorial
ADD CONSTRAINT framework_tutorial_framework_kodu_fkey FOREIGN KEY (framework_kodu) REFERENCES
public.framework(framework_kodu);

--- Name: kutuphane kutuphane_dil_kodu_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kutuphane
ADD CONSTRAINT kutuphane_dil_kodu_fkey FOREIGN KEY (dil_kodu) REFERENCES
public.programlama_dili(dil_kodu);

--- Name: kutuphane_ornekler kutuphane_ornekler_kutuphane_kodu_fkey; Type: FK CONSTRAINT; Schema:
public; Owner: postgres
--

ALTER TABLE ONLY public.kutuphane_ornekler
ADD CONSTRAINT kutuphane_ornekler_kutuphane_kodu_fkey FOREIGN KEY (kutuphane_kodu) REFERENCES
public.kutuphane(kutuphane_kodu);

--- Name: kutuphane_tutorial kutuphane_tutorial_kutuphane_kodu_fkey; Type: FK CONSTRAINT; Schema:
public; Owner: postgres
--

ALTER TABLE ONLY public.kutuphane_tutorial
ADD CONSTRAINT kutuphane_tutorial_kutuphane_kodu_fkey FOREIGN KEY (kutuphane_kodu) REFERENCES
public.kutuphane(kutuphane_kodu);

--- PostgreSQL database dump complete
--

